# This is a modified copy of nixos/modules/services/misc/gitolite.nix.
# In particular it doesn't use the gitolite-admin.git repository, as described
# at  https://gitolite.com/gitolite/odds-and-ends.html
# It also always symlink the .gitolite.rc file to the Nix store instead of
# doing conditionally. It also symlink other configuration files.

{ config, lib, pkgs, ... }:

with lib;

let
  cfg = config.services.mygitolite;
  hooks = lib.concatMapStrings (hook: "${hook} ") cfg.commonHooks;
in
{
  options = {
    services.mygitolite = {
      enable = mkOption {
        type = types.bool;
        default = false;
        description = ''
          Enable gitolite management under the
          <literal>gitolite</literal> user. After
          switching to a configuration with Gitolite enabled, you can
          then run <literal>git clone
          gitolite@host:gitolite-admin.git</literal> to manage it further.
        '';
      };

      dataDir = mkOption {
        type = types.str;
        default = "/var/lib/gitolite";
        description = ''
          Gitolite home directory (used to store all the repositories).
        '';
      };

      adminPubkey = mkOption {
        type = types.str;
        description = ''
          Initial administrative public key for Gitolite. This should
          be an SSH Public Key. Note that this key will only be used
          once, upon the first initialization of the Gitolite user.
          The key string cannot have any line breaks in it.
        '';
      };

      enableGitAnnex = mkOption {
        type = types.bool;
        default = false;
        description = ''
          Enable git-annex support. Uses the <literal>extraGitoliteRc</literal> option
          to apply the necessary configuration.
        '';
      };

      commonHooks = mkOption {
        type = types.listOf types.path;
        default = [];
        description = ''
          A list of custom git hooks that get copied to <literal>~/.gitolite/hooks/common</literal>.
        '';
      };

      extraGitoliteRc = mkOption {
        type = types.lines;
        default = "";
        example = literalExample ''
          $RC{UMASK} = 0027;
          $RC{SITE_INFO} = 'This is our private repository host';
          push( @{$RC{ENABLE}}, 'Kindergarten' ); # enable the command/feature
          @{$RC{ENABLE}} = grep { $_ ne 'desc' } @{$RC{ENABLE}}; # disable the command/feature
        '';
        description = ''
          Extra configuration to append to the default <literal>~/.gitolite.rc</literal>.

          This should be Perl code that modifies the <literal>%RC</literal>
          configuration variable. The default <literal>~/.gitolite.rc</literal>
          content is generated by invoking <literal>gitolite print-default-rc</literal>,
          and extra configuration from this option is appended to it. The result
          is placed to Nix store, and the <literal>~/.gitolite.rc</literal> file
          becomes a symlink to it.

          See also the <literal>enableGitAnnex</literal> option.
        '';
      };

      user = mkOption {
        type = types.str;
        default = "gitolite";
        description = ''
          Gitolite user account. This is the username of the gitolite endpoint.
        '';
      };

      group = mkOption {
        type = types.str;
        default = "gitolite";
        description = ''
          Primary group of the Gitolite user account.
        '';
      };
    };
  };

  config = mkIf cfg.enable (
  let
    rcDir = pkgs.runCommand "gitolite-rc" { preferLocalBuild = true; } ''
      mkdir "$out"
      export HOME=temp-home
      mkdir -p "$HOME/.gitolite/logs" # gitolite can't run without it
      '${pkgs.gitolite}'/bin/gitolite print-default-rc >>"$out/gitolite.rc.default"
      cat <<END >>"$out/gitolite.rc"
      # This file is managed by NixOS.
      # Use services.mygitolite options to control it.

      END
      cat "$out/gitolite.rc.default" >>"$out/gitolite.rc"
      echo -n ${escapeShellArg ''

        # Added by NixOS:
        ${removeSuffix "\n" cfg.extraGitoliteRc}

        # per perl rules, this should be the last line in such a file:
        1;
      ''} >>"$out/gitolite.rc"
    '';
    keyDir = pkgs.runCommand "gitolite-keydir" { preferLocalBuild = true; } ''
      mkdir $out
      echo "${cfg.adminPubkey}" > $out/noteed.pub
    '';
    confFile = pkgs.runCommand "gitolite-conf" { preferLocalBuild = true; } ''
      echo "repo nix-notes" > $out
      echo "  RW+ = noteed" >> $out
    '';
  in {
    services.mygitolite.extraGitoliteRc = optionalString cfg.enableGitAnnex ''
      # Enable git-annex support:
      push( @{$RC{ENABLE}}, 'git-annex-shell ua');
    '';

    users.users.${cfg.user} = {
      description     = "Gitolite user";
      home            = cfg.dataDir;
      uid             = config.ids.uids.gitolite;
      group           = cfg.group;
      useDefaultShell = true;
    };
    users.groups.${cfg.group}.gid = config.ids.gids.gitolite;

    systemd.tmpfiles.rules = [
      "d '${cfg.dataDir}' 0750 ${cfg.user} ${cfg.group} - -"
      "d '${cfg.dataDir}'/.gitolite - ${cfg.user} ${cfg.group} - -"
      "d '${cfg.dataDir}'/.gitolite/logs - ${cfg.user} ${cfg.group} - -"

      "Z ${cfg.dataDir} 0750 ${cfg.user} ${cfg.group} - -"
    ];

    systemd.services.mygitolite-init = {
      description = "Gitolite initialization";
      wantedBy    = [ "multi-user.target" ];
      unitConfig.RequiresMountsFor = cfg.dataDir;

      environment = {
        GITOLITE_RC = ".gitolite.rc";
      };

      serviceConfig = {
        Type = "oneshot";
        User = cfg.user;
        Group = cfg.group;
        WorkingDirectory = "~";
        RemainAfterExit = true;
      };

      path = [ pkgs.gitolite pkgs.git pkgs.perl pkgs.bash pkgs.diffutils config.programs.ssh.package ];
      script = ''
        ln -sf "${rcDir}/gitolite.rc" "$GITOLITE_RC"
        ln -sf "${keyDir}" ${cfg.dataDir}/.gitolite/keydir

        gitolite setup -a dummy
        rm -rf ${cfg.dataDir}/repositories/gitolite-admin.git
        rm -rf ${cfg.dataDir}/repositories/testing.git
        ln -sf "${confFile}" ${cfg.dataDir}/.gitolite/conf/gitolite.conf

        gitolite compile
        gitolite trigger POST_COMPILE

        if [ -n "${hooks}" ]; then
          cp -f ${hooks} .gitolite/hooks/common/
          chmod +x .gitolite/hooks/common/*
        fi
      '';
    };

    environment.systemPackages = [ pkgs.gitolite pkgs.git ]
        ++ optional cfg.enableGitAnnex pkgs.gitAndTools.git-annex;
  });
}
